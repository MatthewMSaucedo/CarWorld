###########################################################################
title Refresh

carworld.love->AuthLambda:/refresh request

AuthLambda->InvalidTokenCache: #tokenInInvalidCache(refreshTokenJti)

InvalidTokenCache->AuthLambda: tokenIsInvalid: false

AuthLambda->carworld.love: jwtAuthToken



###########################################################################
title Register

carworld.love->AuthLambda: /register request

AuthLambda->InvalidTokenCache: #tokenInInvalidCache(refreshJTI)

InvalidTokenCache->

AuthLambda->carworld.love: JWT tokens: { auth, refresh }



###########################################################################
title Guest

carworld.love->AuthLambda:/guest request

AuthLambda->carworld.love: jwtGuestToken



###########################################################################
title Initiate PaymentIntent

carworld.love->ValidatorLambda: request: { body, authToken }
ValidatorLambda->CommerceLambda: request: { body, authToken }

CommerceLambda->Stripe API: { amount, productDetails }
Stripe API->CommerceLambda: { clientSecret, txID }

CommerceLambda->carworld.love: clientSecret



###########################################################################
# Handle Transaction (tx)
###########################################################################
title Handle Transaction (tx)

# Participants
participant carworld.love
participant StripeAPI
participant EmailS3Cache
participant CommerceLambda
participant TxDynamo
participant SES
participant Admin
participant Customer

# cw.love sends Customer email (custEmail) and Transaction ID (txId) to Commerce Lambda
carworld.love->CommerceLambda: custEmail, txId

# cw.love stores the Customer email in S3 cache by key of Transaction ID
CommerceLambda->EmailS3Cache: key(txId), value(custEmail)

# cw.love sends Transaction details (txDtls) to Stripe API
carworld.love->StripeAPI: txDtls, clientSecret

# Stripe API sends Transaction details (txDtls) to Commerce Lambda
StripeAPI->CommerceLambda: txDtls

# Commerce Lambda retrieves Customer email from S3 cache
CommerceLambda->EmailS3Cache: key(txDtls[:txId]), value(custEmail)

# Commerce Lambda stores Transaction details (txDtls) and Customer email in Dynamo
CommerceLambda->TxDynamo: Record(txDtls+custEmail)

# Commerce Lambda sends Transaction details (txDtls) and Customer email to SES
CommerceLambda->SES: txDtls, custEmail

# Commerce Lambda sends email with Transaction details (txDtls) and Customer email (custEmail) to Admin
SES->Admin: email(txDtls, custEmail)

# Commerce Lambda sends Transaction details (txDtls) to SES Customer
CommerceLambda->SES: txDtls

# Commerce Lambda sends email with Transaction details (txDtls) to Customer
SES->Customer: email(txDtls)
